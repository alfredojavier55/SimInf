
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This file is part of SimInf, a framework for stochastic
> ## disease spread simulations.
> ##
> ## Copyright (C) 2015 Pavol Bauer
> ## Copyright (C) 2017 -- 2019 Robin Eriksson
> ## Copyright (C) 2015 -- 2019 Stefan Engblom
> ## Copyright (C) 2015 -- 2020 Stefan Widgren
> ##
> ## SimInf is free software: you can redistribute it and/or modify
> ## it under the terms of the GNU General Public License as published by
> ## the Free Software Foundation, either version 3 of the License, or
> ## (at your option) any later version.
> ##
> ## SimInf is distributed in the hope that it will be useful,
> ## but WITHOUT ANY WARRANTY; without even the implied warranty of
> ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> ## GNU General Public License for more details.
> ##
> ## You should have received a copy of the GNU General Public License
> ## along with this program.  If not, see <https://www.gnu.org/licenses/>.
> 
> library(SimInf)
> library(tools)
> source("util/check.R")
> 
> ## For debugging
> sessionInfo()
R version 4.3.3 (2024-02-29)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 24.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C           LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

time zone: Europe/Berlin
tzcode source: system (glibc)

attached base packages:
[1] tools     stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] SimInf_9.8.1.9001

loaded via a namespace (and not attached):
[1] MASS_7.3-60.0.1 compiler_4.3.3  Matrix_1.6-5    mvtnorm_1.3-3  
[5] grid_4.3.3      digest_0.6.37   lattice_0.22-5 
> 
> ## Check missing and invalid model argument
> res <- assertError(package_skeleton())
> check_error(res, "Missing 'model' argument.")
> 
> res <- assertError(package_skeleton(5))
> check_error(res, "'model' argument is not a 'SimInf_model'.")
> 
> ## Check missing 'ldata', 'gdata' and 'v0' parameters
> m <- mparse(transitions = "@ -> 1 -> S",
+             compartments = "S",
+             u0 = data.frame(S = 0),
+             tspan = 1:10)
> stopifnot(is.null(SimInf:::create_model_R_object_ldata(m)))
> stopifnot(is.null(SimInf:::create_model_R_object_gdata(m)))
> stopifnot(is.null(SimInf:::create_model_R_object_v0(m)))
> 
> ## Check package_skeleton
> m <- mparse(transitions = c("@ -> a -> S",
+                             "S -> b*S*I/(S+I+R) -> I",
+                             "I -> g*I -> R"),
+             compartments = c("S", "I", "R"),
+             ldata = data.frame(a = 1),
+             gdata = c(b = 0.16),
+             u0 = data.frame(S = 99, I = 1, R = 0),
+             v0 = data.frame(g = 0.077),
+             tspan = 1:10)
> 
> ## Check that a malformed package name is detected
> path <- tempdir()
> res <- assertError(package_skeleton(m, name = "S_I_R", path = path))
> check_error(res, "Malformed package name.")
> 
> ## Create a package
> package_skeleton(m, name = "SIR", path = path)
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating C file ...
Creating R file ...
Creating help files ...
> stopifnot(file.exists(file.path(path, "SIR", "DESCRIPTION")))
> stopifnot(file.exists(file.path(path, "SIR", "NAMESPACE")))
> stopifnot(file.exists(file.path(path, "SIR", "man", "SIR-class.Rd")))
> stopifnot(file.exists(file.path(path, "SIR", "man", "SIR.Rd")))
> stopifnot(file.exists(file.path(path, "SIR", "man", "run-methods.Rd")))
> stopifnot(file.exists(file.path(path, "SIR", "R", "model.R")))
> stopifnot(file.exists(file.path(path, "SIR", "src", "model.c")))
> 
> ## Check that it fails if path exists
> res <- assertError(package_skeleton(m, name = "SIR", path = path))
> check_error(res, "already exists.", FALSE)
> 
> ## Cleanup
> unlink(path, recursive = TRUE)
> 
> proc.time()
   user  system elapsed 
  1.121   0.024   1.140 
