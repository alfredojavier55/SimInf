
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This file is part of SimInf, a framework for stochastic
> ## disease spread simulations.
> ##
> ## Copyright (C) 2015 Pavol Bauer
> ## Copyright (C) 2017 -- 2019 Robin Eriksson
> ## Copyright (C) 2015 -- 2019 Stefan Engblom
> ## Copyright (C) 2015 -- 2020 Stefan Widgren
> ##
> ## SimInf is free software: you can redistribute it and/or modify
> ## it under the terms of the GNU General Public License as published by
> ## the Free Software Foundation, either version 3 of the License, or
> ## (at your option) any later version.
> ##
> ## SimInf is distributed in the hope that it will be useful,
> ## but WITHOUT ANY WARRANTY; without even the implied warranty of
> ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> ## GNU General Public License for more details.
> ##
> ## You should have received a copy of the GNU General Public License
> ## along with this program.  If not, see <https://www.gnu.org/licenses/>.
> 
> library(SimInf)
> library(tools)
> source("util/check.R")
> 
> ## For debugging
> sessionInfo()
R version 4.3.3 (2024-02-29)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 24.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C           LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

time zone: Europe/Berlin
tzcode source: system (glibc)

attached base packages:
[1] tools     stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] SimInf_9.8.1.9001

loaded via a namespace (and not attached):
[1] MASS_7.3-60.0.1 compiler_4.3.3  Matrix_1.6-5    mvtnorm_1.3-3  
[5] grid_4.3.3      digest_0.6.37   lattice_0.22-5 
> 
> ## Define a tolerance
> tol <- 1e-8
> 
> model <- SIR(u0 = data.frame(S = c(8, 5, 0), I = c(0, 1, 0), R = c(0, 0, 4)),
+              tspan = 1:5, beta = 0.1, gamma = 0.1)
> 
> res <- assertError(prevalence(model, I ~ . | R == 0, level = 4))
> check_error(res, "'level' must be an integer with a value 1, 2 or 3.")
> 
> res <- assertError(prevalence(model, I ~ . | R == 0))
> check_error(res, "Please run the model first, the trajectory is empty.")
> 
> model@U <- matrix(c(8L, 8L, 8L, 8L, 8L,
+                     0L, 0L, 0L, 0L, 0L,
+                     0L, 0L, 0L, 0L, 0L,
+                     5L, 4L, 3L, 2L, 1L,
+                     1L, 2L, 3L, 3L, 3L,
+                     0L, 0L, 0L, 1L, 2L,
+                     0L, 0L, 0L, 0L, 0L,
+                     0L, 0L, 0L, 0L, 0L,
+                     4L, 4L, 4L, 4L, 4L),
+                   ncol = 5,
+                   byrow = TRUE,
+                   dimnames = list(c("S", "I", "R",
+                                     "S", "I", "R",
+                                     "S", "I", "R"),
+                                   c("1", "2", "3", "4", "5")))
> 
> res <- assertError(prevalence(model, ~I))
> check_error(res, "Invalid 'formula' specification.")
> 
> p <- prevalence(model, I ~ .)$prevalence
> stopifnot(all(abs(p - c(1 / 18, 2 / 18, 3 / 18, 3 / 18, 3 / 18)) < tol))
> 
> p <- prevalence(model, I ~ . | R == 0)$prevalence
> stopifnot(all(abs(p - c(1 / 14, 2 / 14, 3 / 14, 0 / 8, 0 / 8)) < tol))
> 
> p <- prevalence(model, I ~ . | R > 0)$prevalence
> stopifnot(all(abs(p - c(0 / 4, 0 / 4, 0 / 4, 3 / 10, 3 / 10)) < tol))
> 
> p <- prevalence(model, I ~ . | (I + R) < 4)$prevalence
> stopifnot(all(abs(p - c(1 / 14, 2 / 14, 3 / 14, 0 / 8, 0 / 8)) < tol))
> 
> stopifnot(all(is.nan(prevalence(model, I ~ . | R == 5)$prevalence)))
> 
> res <- assertError(prevalence(model, I ~ . | TRUE == 0))
> check_error(
+     res,
+     paste("The condition must be either 'TRUE' or",
+           "'FALSE' for every node and time step."))
> 
> p <- prevalence(model, I ~ . | S == 0 | R == 0)$prevalence
> stopifnot(all(abs(p - c(1 / 18, 2 / 18, 3 / 18, 0 / 12, 0 / 12)) < tol))
> 
> p <- prevalence(model, I ~ . | S == 0 | R == 0, i = 2)$prevalence
> stopifnot(all(abs(p[1:3] - c(1 / 6, 2 / 6, 3 / 6)) < tol))
> stopifnot(all(is.nan(p[4:5])))
> 
> proc.time()
   user  system elapsed 
  1.106   0.041   1.141 
