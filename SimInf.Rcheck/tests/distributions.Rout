
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## This file is part of SimInf, a framework for stochastic
> ## disease spread simulations.
> ##
> ## Copyright (C) 2015 -- 2024 Stefan Widgren
> ##
> ## SimInf is free software: you can redistribute it and/or modify
> ## it under the terms of the GNU General Public License as published by
> ## the Free Software Foundation, either version 3 of the License, or
> ## (at your option) any later version.
> ##
> ## SimInf is distributed in the hope that it will be useful,
> ## but WITHOUT ANY WARRANTY; without even the implied warranty of
> ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> ## GNU General Public License for more details.
> ##
> ## You should have received a copy of the GNU General Public License
> ## along with this program.  If not, see <https://www.gnu.org/licenses/>.
> 
> library(SimInf)
> library(tools)
> source("util/check.R")
> 
> ## Specify the number of threads to use.
> set_num_threads(1)
> 
> ## For debugging
> sessionInfo()
R version 4.3.3 (2024-02-29)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 24.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0 
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C           LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

time zone: Europe/Berlin
tzcode source: system (glibc)

attached base packages:
[1] tools     stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] SimInf_9.8.1.9001

loaded via a namespace (and not attached):
[1] MASS_7.3-60.0.1 compiler_4.3.3  Matrix_1.6-5    mvtnorm_1.3-3  
[5] grid_4.3.3      digest_0.6.37   lattice_0.22-5 
> 
> res <- assertError(SimInf:::parse_priors(c(a + b ~ uniform(0, 5),
+                                            c ~ uniform(0, 1), 4)))
> check_error(res, "'priors' must be a formula or a list with formula items.")
> 
> res <- assertError(SimInf:::parse_priors(4))
> check_error(res, "'priors' must be a formula or a list with formula items.")
> 
> res <- assertError(SimInf:::parse_priors(NULL))
> check_error(res, "'priors' must be a formula or a list with formula items.")
> 
> res <- assertError(SimInf:::parse_priors(mu ~ uniform(0, 1) + normal(0, 1)))
> check_error(res, "Invalid formula specification for distribution.")
> 
> res <- assertError(SimInf:::parse_priors(mu ~ uniform[0, 1]))
> check_error(res, "Invalid formula specification for distribution.")
> 
> res <- assertError(SimInf:::parse_priors(mu ~ unknown(0, 1)))
> check_error(res, "Unknown distribution: 'unknown'.")
> 
> res <- assertError(SimInf:::parse_priors(c(muR ~ uniform(0, 1),
+                                            muR ~ uniform(0, 1))))
> check_error(res, "'priors' must have non-duplicated parameter names.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ uniform(1)))
> check_error(res, "Invalid formula specification for uniform distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ uniform(1, 0)))
> check_error(res, "Invalid distribution: uniform bounds in wrong order.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ normal(1)))
> check_error(res, "Invalid formula specification for normal distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ normal(0, -1)))
> check_error(res, "Invalid distribution: normal variance must be >= 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ lognormal(1)))
> check_error(res, "Invalid formula specification for lognormal distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ lognormal(NA, 1)))
> check_error(res, "Invalid formula specification for lognormal distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ lognormal(0, -1)))
> check_error(
+     res,
+     "Invalid distribution: lognormal standard deviation must be >= 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ poisson(1, 2)))
> check_error(res, "Invalid formula specification for poisson distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ poisson(-1)))
> check_error(res, "Invalid distribution: lambda must be >= 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ normal(0, gamma)))
> check_error(res, "Invalid formula specification for 'priors'.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ gamma(1)))
> check_error(res, "Invalid formula specification for gamma distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ gamma(-1, 1)))
> check_error(res, "Invalid distribution: gamma hyperparameters must be > 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ gamma(1, -1)))
> check_error(res, "Invalid distribution: gamma hyperparameters must be > 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ binomial(1)))
> check_error(res, "Invalid formula specification for binomial distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ binomial(1, NA)))
> check_error(res, "Invalid formula specification for binomial distribution.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ binomial(1, -1)))
> check_error(res, "Invalid distribution: binomial hyperparameters must be >= 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ binomial(1.1, 0.1)))
> check_error(res, "Invalid distribution: binomial size must be an integer >= 0.")
> 
> res <- assertError(SimInf:::parse_priors(beta ~ binomial(1, 1.1)))
> check_error(res, "Invalid distribution: binomial probability must be <= 1.")
> 
> res <- assertError(SimInf:::parse_priors(~ uniform(1, 5)))
> check_error(res, "Invalid formula specification for distribution.")
> 
> stopifnot(identical(
+     SimInf:::parse_priors(beta ~ uniform(1, 5)),
+     data.frame(parameter = "beta", distribution = "uniform",
+                p1 = 1, p2 = 5, stringsAsFactors = FALSE)))
> 
> res <- assertError(
+     SimInf:::match_priors(
+                  SIR(u0 = data.frame(S = 99, I = 1, R = 0),
+                      tspan = 1:100,
+                      beta = 0.16,
+                      gamma = 0.077),
+                  data.frame(parameter = "delta",
+                             distribution = "uniform",
+                             p1 = 1,
+                             p2 = 5)))
> check_error(
+     res,
+     "All parameters in 'priors' must be either in 'gdata' or 'ldata'.")
> 
> res <- assertError(
+     SimInf:::match_priors(
+                  SIR(u0 = data.frame(S = c(99, 99), I = c(1, 1), R = c(0, 0)),
+                      tspan = 1:100,
+                      beta = 0.16,
+                      gamma = 0.077),
+                  data.frame(parameter = "beta",
+                             distribution = "uniform",
+                             p1 = 1,
+                             p2 = 5)))
> check_error(res, "The 'model' must contain one node.")
> 
> res <- SimInf:::match_priors(
+                     SIR(u0 = data.frame(S = 99, I = 1, R = 0),
+                         tspan = 1:100,
+                         beta = 0.16,
+                         gamma = 0.077),
+                     data.frame(parameter = "beta",
+                                distribution = "uniform",
+                                p1 = 1,
+                                p2 = 5))
> stopifnot(identical(res, list(pars = 1L, target = "ldata")))
> 
> res <- SimInf:::match_priors(
+                     mparse(transitions = c("S -> beta*S*I/(S+I+R) -> I",
+                                            "I -> gamma*I -> R"),
+                            compartments = c("S", "I", "R"),
+                            gdata = c(beta = 0.16, gamma = 0.077),
+                            u0 = data.frame(S = 99, I = 1, R = 0),
+                            tspan = 1:10),
+                     data.frame(parameter = "beta",
+                                distribution = "uniform",
+                                p1 = 1,
+                                p2 = 5))
> stopifnot(identical(res, list(pars = 1L, target = "gdata")))
> 
> proc.time()
   user  system elapsed 
  1.074   0.072   1.144 
